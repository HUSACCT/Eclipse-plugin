package plugin.views.internalframes;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.filechooser.FileFilter;

import plugin.controller.PluginController;

public class JInternalHusacctImportArchitecture extends JInternalFrame {

	private static final long serialVersionUID = 1L;
	private JFileChooser jFileChooser;
	private String choosertitle;
	private JPanel jPanel = new JPanel();
	private JTextField txtSource;
	private PluginController pluginController;
		   		   
	public JInternalHusacctImportArchitecture(PluginController pluginController) {		
		this.pluginController = pluginController;
		getContentPane().add(jPanel);		    
		JLabel lblSelectSource = new JLabel("Select architecture file");
		lblSelectSource.setToolTipText("Select saved achitecture file. The file is a .xml");		    
		txtSource = new JTextField();
		txtSource.setEnabled(false);
		txtSource.setColumns(10);		    
		
		JButton btnBrowse = new JButton("Browse");
		btnBrowse.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				browse();
			}
		});
		
		JButton btnSave = new JButton("Import");
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				importFile();
			}
		});
		
		//Grouplayout code is generated by a windowbuilder plugin
		GroupLayout gl_jPanel = new GroupLayout(jPanel);
		gl_jPanel.setHorizontalGroup(
			gl_jPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_jPanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(lblSelectSource)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_jPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(btnSave)
						.addGroup(gl_jPanel.createSequentialGroup()
							.addComponent(txtSource, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnBrowse)))
					.addContainerGap(96, Short.MAX_VALUE))
		);
		gl_jPanel.setVerticalGroup(
			gl_jPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_jPanel.createSequentialGroup()
					.addGap(28)
					.addGroup(gl_jPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblSelectSource)
						.addComponent(txtSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnBrowse))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnSave)
					.addContainerGap(32, Short.MAX_VALUE))
		);
		jPanel.setLayout(gl_jPanel);
		
		
		setBounds(50, 50, 414, 139);
		setResizable(true);
		setClosable(true);
		setMaximizable(true);
		setIconifiable(true);
		setTitle("Import Architecture");
		setVisible(true);	   
	}
		 
	private void browse() {		         
		jFileChooser = new JFileChooser(); 
		jFileChooser.setCurrentDirectory(new java.io.File("."));
		jFileChooser.setDialogTitle(choosertitle);
		jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		jFileChooser.setFileFilter(new TypeOfFile());  
		jFileChooser.setAcceptAllFileFilterUsed(false); 
		if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			txtSource.setText(jFileChooser.getCurrentDirectory() + "\\" + jFileChooser.getSelectedFile().getName());
		}
		else {
			System.out.println("No Selection ");
		}
	}
	
	private void importFile(){
		  pluginController.importArchitecture();
	}
  
	class TypeOfFile extends FileFilter  
	{   
		public boolean accept(File f)  
		{  
			return f.isDirectory()||f.getName().toLowerCase().endsWith(".xml");  
		}   
		public String getDescription()  
		{  
			return ".xml files";  
		}  
	}
}
