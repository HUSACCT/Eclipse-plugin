package plugin.views.internalframes;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.filechooser.FileFilter;
import plugin.controller.PluginController;

public class JInternalHusacctExportArchitecture extends JInternalFrame {

	private static final long serialVersionUID = 1L;
	private JFileChooser jFileChooser;
	private String chooserTitleString;
	private JPanel jPanel = new JPanel();
	private JTextField textfieldProgramSource;
	private PluginController pluginController;
	private File file = null;
		   		   
	public JInternalHusacctExportArchitecture(PluginController pluginController) {		
		this.pluginController = pluginController;
		getContentPane().add(jPanel);		    
		JLabel labelSelectArchitecture = new JLabel("Select architecture file");
		labelSelectArchitecture.setToolTipText("Select saved achitecture file. The file is a .xml");		    
		textfieldProgramSource = new JTextField();
		textfieldProgramSource.setEnabled(false);
		textfieldProgramSource.setColumns(10);		    
		
		JButton buttonBrowse = new JButton("Browse");
		buttonBrowse.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				browseArchitecture();
			}
		});
		
		JButton buttonSave = new JButton("Export");
		buttonSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				importFile();
			}
		});
		
		//Grouplayout code is generated by a windowbuilder plugin
		GroupLayout groupLayoutPanel = new GroupLayout(jPanel);
		groupLayoutPanel.setHorizontalGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addGroup(groupLayoutPanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(labelSelectArchitecture)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addComponent(buttonSave)
					.addGroup(groupLayoutPanel.createSequentialGroup()
					.addComponent(textfieldProgramSource, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(buttonBrowse)))
					.addContainerGap(96, Short.MAX_VALUE))
		);
		groupLayoutPanel.setVerticalGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addGroup(groupLayoutPanel.createSequentialGroup()
					.addGap(28)
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.BASELINE)
					.addComponent(labelSelectArchitecture)
					.addComponent(textfieldProgramSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(buttonBrowse))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(buttonSave)
					.addContainerGap(32, Short.MAX_VALUE))
		);
		jPanel.setLayout(groupLayoutPanel);
		
		setBounds(50, 50, 414, 139);
		setResizable(true);
		setClosable(true);
		setMaximizable(true);
		setIconifiable(true);
		setTitle("Import Architecture");
		setVisible(true);	   
	}
		 
	private void browseArchitecture() {		         
		jFileChooser = new JFileChooser(); 
		jFileChooser.setCurrentDirectory(new java.io.File("."));
		jFileChooser.setDialogTitle(chooserTitleString);
		jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		jFileChooser.setFileFilter(new TypeOfFile());  
		jFileChooser.setAcceptAllFileFilterUsed(false); 
		if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			textfieldProgramSource.setText(jFileChooser.getSelectedFile().getName());
			file = jFileChooser.getSelectedFile();
		}
		else {
			System.out.println("No Selection ");
		}
	}
	
	private void importFile(){
		if(file != null){
			pluginController.exportLogicalArchitecture(file);
		}		  
	}
  
	class TypeOfFile extends FileFilter  
	{   
		public boolean accept(File f)  
		{  
			return f.isDirectory()||f.getName().toLowerCase().endsWith(".xml");  
		}   
		public String getDescription()  
		{  
			return ".xml files";  
		}  
	}
}
