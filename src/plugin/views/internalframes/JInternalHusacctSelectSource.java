package plugin.views.internalframes;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

import plugin.controller.PluginController;

public class JInternalHusacctSelectSource extends JInternalFrame {
		
	private static final long serialVersionUID = 1L;
	private JFileChooser jFileChooser;
	private String choosertitle;
	private JPanel jPanel = new JPanel();
	private JTextField txtJava;
	private JTextField txtVersion;
	private JTextField txtSource;
	private String path;
	private PluginController pluginController;
		   
		   
	public JInternalHusacctSelectSource(PluginController pluginController) {	
		this.pluginController = pluginController;
	    getContentPane().add(jPanel);
	    JLabel lblLanguage = new JLabel("Programm language");

		txtJava = new JTextField();
		txtJava.setEnabled(false);
		txtJava.setEditable(false);
		txtJava.setText("Java");
		txtJava.setColumns(10);
		
		JLabel lblVersion = new JLabel("Version number");
		lblVersion.setToolTipText("Number of the version of your application");
		
		txtVersion = new JTextField();
		txtVersion.setText("1.0");
		txtVersion.setColumns(10);
		
		JLabel lblSelectSource = new JLabel("Select source");
		lblSelectSource.setToolTipText("Select the directory of the application which has to be used by the HUSACCT-tool");
		
		txtSource = new JTextField();
		txtSource.setEnabled(false);
		txtSource.setColumns(10);
		txtSource.setText("");
		
		JButton btnBrowse = new JButton("Browse");
		btnBrowse.addActionListener(new ActionListener() {		 
		    public void actionPerformed(ActionEvent e)
		    {
		    	selectFile();
		    }
		}); 

		JButton btnSave = new JButton("Save");
		btnSave.addActionListener(new ActionListener() {		 
		    public void actionPerformed(ActionEvent e)
		    {
		    	save();
		    }
		}); 

		//Grouplayout code is generated by a windowbuilder plugin
		GroupLayout gl_jPanel = new GroupLayout(jPanel);
		gl_jPanel.setHorizontalGroup(
			gl_jPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_jPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_jPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(lblVersion)
						.addComponent(lblSelectSource)
						.addComponent(lblLanguage, GroupLayout.PREFERRED_SIZE, 125, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(gl_jPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(btnSave)
						.addGroup(gl_jPanel.createSequentialGroup()
							.addComponent(txtSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnBrowse))
						.addGroup(gl_jPanel.createParallelGroup(Alignment.TRAILING)
							.addComponent(txtVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addComponent(txtJava, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(64, Short.MAX_VALUE))
		);
		gl_jPanel.setVerticalGroup(
			gl_jPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_jPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_jPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblLanguage, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
						.addComponent(txtJava, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(gl_jPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblVersion)
						.addComponent(txtVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(gl_jPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblSelectSource)
						.addComponent(txtSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnBrowse))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(btnSave)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);   
		jPanel.setLayout(gl_jPanel);
		setBounds(50, 50, 392, 181);
		setResizable(true);
		setClosable(true);
		setMaximizable(true);
		setIconifiable(true);
		setTitle("Select source");
		setVisible(true);
	}
  	
	private void selectFile(){		         
		jFileChooser = new JFileChooser(); 
		jFileChooser.setCurrentDirectory(new java.io.File("."));
		jFileChooser.setDialogTitle(choosertitle);
		jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jFileChooser.setAcceptAllFileFilterUsed(false);
		if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			txtSource.setText(jFileChooser.getSelectedFile().getAbsolutePath());
			path = jFileChooser.getSelectedFile().getAbsolutePath();
		}
		else {
			System.out.println("No Selection when choosing ");
		}
	}
	
	public void save(){
		if(!txtSource.getText().equals("") && !txtVersion.getText().equals("")){
			pluginController.sourceSelected(new String[]{path}, txtVersion.getText());
		}
		else{
			//TODO popup met message van niet ingevuld
			System.out.println("No Selection when saving");
		}
	}
}
