package plugin.views.internalframes;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import plugin.controller.PluginController;

public class JInternalHusacctSelectSource extends JInternalFrame {
		
	private static final long serialVersionUID = 1L;
	private JFileChooser jFileChooser;
	private String chooserTitleString, pathString;
	private JTextField textfieldJava, textfieldVersion, textfieldSource;
	private JPanel jPanel = new JPanel();
	private PluginController pluginController;
	private JLabel labelLanguage, labelVersion, labelSelectSource;
	
	public JInternalHusacctSelectSource(PluginController pluginController) {	
		this.pluginController = pluginController;
	    getContentPane().add(jPanel);
	    initializeVariables();
		
		JButton buttonBrowse = new JButton("Browse");
		buttonBrowse.addActionListener(new ActionListener() {		 
			public void actionPerformed(ActionEvent e)
		    {
		    	selectSourceFile();
		    }
		}); 

		JButton buttonSave = new JButton("Save");
		buttonSave.addActionListener(new ActionListener() {		 
		    public void actionPerformed(ActionEvent e)
		    {
		    	saveSourceLocation();
		    }
		}); 

		//Grouplayout code is generated by a windowbuilder plugin
		GroupLayout groupLayoutPanel = new GroupLayout(jPanel);
		groupLayoutPanel.setHorizontalGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addGroup(groupLayoutPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addComponent(labelVersion)
					.addComponent(labelSelectSource)
					.addComponent(labelLanguage, GroupLayout.PREFERRED_SIZE, 125, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addComponent(buttonSave)
					.addGroup(groupLayoutPanel.createSequentialGroup()
					.addComponent(textfieldSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(buttonBrowse))
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.TRAILING)
					.addComponent(textfieldVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(textfieldJava, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(64, Short.MAX_VALUE))
		);
		groupLayoutPanel.setVerticalGroup(groupLayoutPanel.createParallelGroup(Alignment.LEADING)
					.addGroup(groupLayoutPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.BASELINE)
					.addComponent(labelLanguage, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
					.addComponent(textfieldJava, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.BASELINE)
					.addComponent(labelVersion)
					.addComponent(textfieldVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(groupLayoutPanel.createParallelGroup(Alignment.BASELINE)
					.addComponent(labelSelectSource)
					.addComponent(textfieldSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addComponent(buttonBrowse))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(buttonSave)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);   
		jPanel.setLayout(groupLayoutPanel);
		setBounds(50, 50, 392, 181);
		setResizable(true);
		setClosable(true);
		setMaximizable(true);
		setIconifiable(true);
		setTitle("Select source");
		setVisible(true);
	}
  	
	private void initializeVariables(){
		labelLanguage = new JLabel("Program language");
		textfieldJava = new JTextField("Java");
		textfieldJava.setEnabled(false);
		textfieldJava.setEditable(false);
		textfieldJava.setColumns(10);
		labelVersion = new JLabel("Version number");
		labelVersion.setToolTipText("Number of the version of your application");
		textfieldVersion = new JTextField();
		textfieldVersion.setText("1.0");
		textfieldVersion.setEnabled(true);
		textfieldVersion.setEditable(true);
		textfieldVersion.setColumns(10);
		labelSelectSource = new JLabel("Select source");
		labelSelectSource.setToolTipText("Select the directory of the application which has to be used by the HUSACCT-tool");
		textfieldSource = new JTextField();
		textfieldSource.setEnabled(false);
		textfieldSource.setColumns(10);
		textfieldSource.setText("");
	}
	
	private void selectSourceFile(){		         
		jFileChooser = new JFileChooser(); 
		jFileChooser.setCurrentDirectory(new java.io.File("."));
		jFileChooser.setDialogTitle(chooserTitleString);
		jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jFileChooser.setAcceptAllFileFilterUsed(false);
		if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			textfieldSource.setText(jFileChooser.getSelectedFile().getAbsolutePath());
			pathString = jFileChooser.getSelectedFile().getAbsolutePath();
		}
		else {
			System.out.println("No Selection when choosing ");
		}
	}
	
	public void saveSourceLocation(){
		if(!textfieldSource.getText().equals("") && !textfieldVersion.getText().equals("")){
			pluginController.sourceSelected(new String[]{pathString}, textfieldVersion.getText());
		}
		else{
		 //TODO
		}
	}
}
